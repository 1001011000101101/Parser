@page "/companies"
@using Parser.Shared.Models
@using System.IO
@using BlazorInputFile

@inject HttpClient Http
@inject BlazorTimer Timer


<h1>Реестр компаний</h1>

<BSAlert Color="Color.Light">
    @status
</BSAlert>


@if (companiesCount == null)
{
    <p><em>Загрузка</em></p>
}
else
{
    <BSCard Alignment="Alignment.Center">
        <BSCard CardType="CardType.Body">
            <BSBasicForm>
                <BSFormGroup>
                    <BSLabel For="exampleFormControlFile1">Реесть компаний</BSLabel>
                    <InputFile OnChange="HandleSelection" />
                </BSFormGroup>
            </BSBasicForm>
        </BSCard>
    </BSCard>
}





@code {
    private int? companiesCount;
    string status;

    protected override async Task OnInitializedAsync()
    {
        companiesCount = await Http.GetJsonAsync<int>("Settings/CompaniesCount");
        status = "На входе - эксель. ИНН - первый столбец";
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        Console.WriteLine($"HandleSelection");

        status = "Загрузка....";
        this.StateHasChanged();

        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";
            Console.WriteLine(status);

            var content = new MultipartFormDataContent {
                { new ByteArrayContent(ms.GetBuffer()), "\"upload\"", file.Name }
            };
            var responce = await Http.PostAsync("Settings/UploadCompanies", content);
            if (responce.ReasonPhrase.Length > 0)
            {
                status = responce.ReasonPhrase;
            }
            this.StateHasChanged();
        }
    }


}
