@page "/"
@using Parser.Shared.Models

@inject HttpClient Http
@inject BlazorTimer Timer


<h1>Настройки</h1>

<BSAlert Color="Color.Light">
    @message
</BSAlert>


@if (settings == null)
{
    <p><em>Загрузка</em></p>
}
else
{
    <BSBasicForm>
        <BSFormGroup>
            <BSLabel For="regionInput">Регион</BSLabel>
            <BSBasicInput ValueChanged="@((string x) => RegionChanged(x))" Id="regionInput" InputType="InputType.Text" PlaceHolder="Регион поиска" Value="@settings.Region"></BSBasicInput>
            <small id="regionHelp" class="form-text text-muted"></small>
        </BSFormGroup>





        <BSFormGroup>
            <BSLabel For="exampleInputPassword1">Password</BSLabel>
            <BSBasicInput Id="exampleInputPassword1" InputType="InputType.Password" PlaceHolder="Password" Value="string.Empty"></BSBasicInput>
        </BSFormGroup>

        <BSFormGroup IsCheck="true">
            <BSBasicInput Id="exampleCheck1" InputType="InputType.Checkbox" Value="string.Empty"></BSBasicInput>
            <BSLabel IsCheck="true" For="exampleCheck1">Check me out</BSLabel>
        </BSFormGroup>

        <BSButton Color="Color.Primary" OnClick="@(x => message = "")" ButtonType="ButtonType.Button">Button</BSButton>

    </BSBasicForm>
}





@code {
    private Settings settings;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        settings = await Http.GetJsonAsync<Settings>("Settings");
    }

    protected async Task RegionChanged(string region)
    {
        settings.Region = region;
        await SaveSettingsAsync();
    }


    protected async Task SaveSettingsAsync()
    {
        var result = await Http.PostJsonAsync<Responce>("Settings", settings);
        message = result.Message;

        Timer.SetTimer(5000);
        Timer.OnElapsed += CloseAlert;
        var rtrt = "";
    }

    protected void CloseAlert()
    {
        message = "";
        this.StateHasChanged();
    }

}
