@page "/parsing"
@using Parser.Shared.Models

@inject HttpClient Http
@inject BlazorTimer Timer


<h1></h1>

<BSAlert Color="Color.Light">

</BSAlert>


@if (stateParserByInn == null)
{
    <p><em>Загрузка</em></p>
}
else
{

    <BSCard Alignment="Alignment.Center">
        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">Парсинг по ИНН</BSCard>
            <BSButton OnClick="ToggleStateParsing" Color="@colorParserByInn">@messageParserByInn</BSButton>
            <BSCard CardType="CardType.Text">@stateDescriptionParserByInn</BSCard>
        </BSCard>
    </BSCard>


}






@code {
    private string messageRun = "Запустить";
    private string messageStop = "Остановить";
    private string messageInProcess = "..........";

    private string messageParserByInn = "";
    private int? stateParserByInn;
    private Color colorParserByInn = Color.Secondary;
    private string stateDescriptionParserByInn = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetJsonAsync<ParserResponce>("Parsing/ParserByInnState");

        Timer.SetTimer(5000, true);
        Timer.OnElapsed += UpdateStateParserByInn;

        //var result = await Http.GetJsonAsync<ParserResponce>("Parsing/ParserByInnState");

        //if (result.ParserInfo.State == (int)Enums.ParserState.Started)
        //{
        //    messageParserByInn = messageStop;
        //    colorParserByInn = Color.Success;


        //    Timer.SetTimer(5000, true);
        //    Timer.OnElapsed += UpdateStateParserByInn;
        //}
        //else
        //{
        //    stateDescriptionParserByInn = result.ParserInfo.StateDescription;

        //    messageParserByInn = messageRun;
        //    colorParserByInn = Color.Secondary;
        //}


        //stateParserByInn = result.ParserInfo.State;
        //this.StateHasChanged();
    }

    async void ToggleStateParsing(MouseEventArgs e)
    {
        var result = await Http.PutJsonAsync<ParserResponce>("Parsing/ParserByInnStateToggle", new object());


        //Timer.SetTimer(5000, true);
        //Timer.OnElapsed += UpdateStateParserByInn;

        messageParserByInn = messageInProcess;
        this.StateHasChanged();

        //messageParserByInn = messageInProcess;
        //this.StateHasChanged();

        //Timer.StopTimer();

        //var result = await Http.PutJsonAsync<ParserResponce>("Parsing/ParserByInnStateToggle", new object());

        //if (result.ParserInfo.State == (int)Enums.ParserState.Started)
        //{
        //    //messageParserByInn = messageStop;
        //    //colorParserByInn = Color.Success;

        //    Timer.SetTimer(5000, true);
        //    Timer.OnElapsed += UpdateStateParserByInn;
        //}
        //else
        //{
        //    //messageParserByInn = messageRun;
        //    //colorParserByInn = Color.Secondary;
        //    Timer.StopTimer();
        //}
        //this.StateHasChanged();
    }

    async void UpdateStateParserByInn()
    {
        var result = await Http.GetJsonAsync<ParserResponce>("Parsing/ParserByInnState");
        stateDescriptionParserByInn = result.ParserInfo.StateDescription;

        if (result.ParserInfo.State == (int)Enums.ParserState.Started)
        {
            messageParserByInn = messageStop;
            colorParserByInn = Color.Success;
        }
        else if (result.ParserInfo.State == (int)Enums.ParserState.Stopped)
        {
            messageParserByInn = messageRun;
            colorParserByInn = Color.Secondary;
            //Timer.StopTimer();
        }
        else
        {
            messageParserByInn = messageInProcess;
            colorParserByInn = Color.Secondary;
        }

        stateParserByInn = result.ParserInfo.State;
        this.StateHasChanged();
    }
}
