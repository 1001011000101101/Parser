@page "/parsing"
@using Parser.Shared.Models

@inject HttpClient Http
@inject BlazorTimer Timer


<h1>Парсинг</h1>

<BSAlert Color="Color.Light">

</BSAlert>


@if (isBusyParserByInn == null)
{
    <p><em>Загрузка</em></p>
}
else
{

    <BSCard Alignment="Alignment.Center">
        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">Парсинг по ИНН</BSCard>
            <BSButton OnClick="ToggleStateParsing" Color="@colorParserByInn">@messageParserByInn</BSButton>
            <BSCard CardType="CardType.Text">@stateParserByInn</BSCard>
        </BSCard>
    </BSCard>


}






@code {
    private string messageRun = "Запустить";
    private string messageStop = "Остановить";
    private string messageInProcess = "..........";

    private string messageParserByInn = "";
    private bool? isBusyParserByInn;
    private Color colorParserByInn = Color.Secondary;
    private string stateParserByInn = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetJsonAsync<ParserResponce>("Parsing/ParserByInnState");

        if (result.ParserState.IsBusy)
        {
            messageParserByInn = messageStop;
            colorParserByInn = Color.Success;
        }
        else
        {
            messageParserByInn = messageRun;
            colorParserByInn = Color.Secondary;
        }


        isBusyParserByInn = result.ParserState.IsBusy;
        this.StateHasChanged();
    }

    async void ToggleStateParsing(MouseEventArgs e)
    {
        messageParserByInn = messageInProcess;
        this.StateHasChanged();

        var result = await Http.PutJsonAsync<ParserResponce>("Parsing/ParserByInnStateToggle", new object());

        if (result.ParserState.IsBusy)
        {
            messageParserByInn = messageStop;
            colorParserByInn = Color.Success;

            Timer.SetTimer(5000, true);
            Timer.OnElapsed += UpdateStateParserByInn;
        }
        else
        {
            messageParserByInn = messageRun;
            colorParserByInn = Color.Secondary;
            Timer.StopTimer();
        }
        this.StateHasChanged();
    }

    async void UpdateStateParserByInn()
    {
        var result = await Http.GetJsonAsync<ParserResponce>("Parsing/ParserByInnState");
        stateParserByInn = result.ParserState.Description;
        if (result.ParserState.IsBusy)
        {
            messageParserByInn = messageStop;
            colorParserByInn = Color.Success;
        }
        else
        {
            messageParserByInn = messageRun;
            colorParserByInn = Color.Secondary;
        }


        isBusyParserByInn = result.ParserState.IsBusy;
        this.StateHasChanged();
    }
}
